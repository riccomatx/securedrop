Internationalization (i18n)
===========================

The code, templates and javascript user visible strings must all be
wrapped with `gettext`_ functions to be substituted at runtime with
the equivalent localized string. These function names are used as
markers to collect the strings to be translated and store them into
the ``securedrop/translations/messages.pot`` file. For each language
to be translated, a directory is created such as
``securedrop/translations/fr_FR`` and populated with files derived
from ``securedrop/translations/messages.pot``, for translators to work
with and for the `gettext`_ substitution at runtime.

The manage.py translate helper
------------------------------

The `pybabel`_ command line is wrapped into the ``manage.py
translate`` helper for convenience. It is designed to be used by
developers, to run tests with fixtures and during packaging.

Updating strings to be translated
---------------------------------

After modifying a string in the code, templates or javascript, the
``securedrop/translations/messages.pot`` file must be updated by
running the following command in ``/vagrant/securedrop``, in the
development virtual machine:

.. code:: sh

    ./manage.py --verbose translate --extract-update

The updated ``securedrop/translations/messages.pot`` should then be
reviewed and commited. Once merged in develop, the changes will be
visible in the `Weblate`_ web interface used by translators because it
watches the develop branch of the SecureDrop repository.

Compiling translations
----------------------

`gettext`_ needs a compiled file for each language (the ``*.mo``
files). This can be done by running the following command
in ``/vagrant/securedrop``, in the development virtual machine:

.. code:: sh

    ./manage.py --verbose translate --compile


Verifying translations
----------------------

After a translation is compiled, the web page in which it shows can be
verified visually by navigating to the corresponding state from
``http://localhost:8080`` for the source interface or
``http://localhost:8081`` for the journalist interface after running
the following:

.. code:: sh

     ./manage.py run

An easier way is to generate screenshots for each desired language
with:

.. code:: sh

     $ export PAGE_LAYOUT_LOCALES=en_US,fr_FR
     $ pytest -v --page-layout tests/pages-layout
     ...
     ...TestJournalistLayout::test_col_no_documents[en_US] PASSED
     ...TestJournalistLayout::test_col_no_documents[fr_FR] PASSED
     ...

.. note:: if unset, PAGE_LAYOUT_LOCALES defaults to en_US

The screenshots for ``fr_FR`` are available in
``securedrop/tests/pages-layout/screenshots/fr_FR`` and the name of
the file can be found in the function that created it in
``securedrop/tests/pages-layout/test_journalist.py`` or
``securedrop/tests/pages-layout/test_source.py``.

Merging translations back to develop
------------------------------------

`Weblate`_ automatically pushes the translations done via the web
interface as a series of commit to the `i18n` branch in the `Weblate
SecureDrop branch`_ which is a fork of the `develop` branch of the
`SecureDrop git repository`_. These translations need to be submitted
to the `develop` branch via pull requests for merge on a regular basis.

.. code:: sh

      $ git clone https://github.com/freedomofpress/securedrop
      $ cd securedrop
      $ git remote add lab http://lab.securedrop.club/bot/securedrop/tree/i18n
      $ git fetch lab
      $ git checkout -b wip-i18n origin/develop
      $ h=$(git log --reverse --pretty='%H' --cherry-mark --right-only \
            origin/develop...lab/i18n)
      $ git cherry-pick $h
      $ git push wip-i18n

Go to https://github.com/freedomofpress/securedrop and propose a pull request.

The `git log` part of the above snippet lists all commits that are not
already in the `origin/develop` branch and the `patch they contain is unique`_
so it is not confused with a previous cherry-pick of the same patch.

Merging develop into the weblate fork
-------------------------------------

`Weblate`_ works on a long standing fork of the `SecureDrop git
repository`_ and is exclusively responsible for the content of the
`*.pot` and `*.po` files. It needs to merge the content of the
`develop` branch back into its `i18n` branch to be able to extract
from the sources new strings to translate or existing strings that
have been updated.

The translations must be suspended in `Weblate`_ to avoid conflicts.

* Go to the `Weblate commit page for SecureDrop`_

|Weblate commit Lock|

* Click `Lock`

|Weblate commit Locked|

The `develop` branch can now be merged into `i18n` as follows:

.. code:: sh

      $ git clone https://github.com/freedomofpress/securedrop
      $ cd securedrop
      $ git remote add lab http://lab.securedrop.club/bot/securedrop/tree/i18n
      $ git fetch lab
      $ git checkout -b i18n lab/i18n
      $ git merge origin/develop
      $ ./manage.py translate --extract-update

The `manage.py` command examines all the source files looking for
strings that need to be translated (i.e. gettext('translate me') etc.)
and update the files used by Weblate, removing, updating and inserting
strings to keep them in sync withe the sources. Carefully review the
output of `git diff`. Check `messages.pot` first for updated strings,
looking for formatting problems. Then review the `messages.po` of one
existing translation, with a focus on `fuzzy` translations. There is
no need to review other translations because they are processed in the
same way. When you are satisfied with the result, it can be merged
with:

.. code:: sh

      $ git commit -a -m 'l10n: sync with upstream origin/develop'
      $ git push lab i18n


* Go to the `Weblate commit page for SecureDrop`_ and verify the
  commit hash matches the last commit of the `i18n` branch. This must
  happen instantly after the branch is pushed because Weblate is
  notified by GitLab via a webhook. If it is different, ask for help.

|Weblate commit Unlock|

* Click `Unlock`

|Weblate commit Unlocked|

.. _`gettext`: https://www.gnu.org/software/gettext/
.. _`pybabel`: http://babel.pocoo.org/
.. _`Weblate`: http://weblate.securedrop.club/
.. _`SecureDrop git repository`: https://github.com/freedomofpress/securedrop
.. _`Weblate SecureDrop branch`: http://lab.securedrop.club/bot/securedrop/tree/i18n
.. _`patch they contain is unique`: https://git-scm.com/docs/git-patch-id
.. _`Weblate commit page for SecureDrop`: https://weblate.securedrop.club/projects/securedrop/securedrop/#repository

.. |Weblate commit Lock| image:: ../images/weblate/admin-lock.png
.. |Weblate commit Locked| image:: ../images/weblate/admin-locked.png
.. |Weblate commit Unlock| image:: ../images/weblate/admin-unlock.png
.. |Weblate commit Unlocked| image:: ../images/weblate/admin-unlocked.png
